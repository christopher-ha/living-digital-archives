import Head from "next/head";
import styles from "@/styles/pages/Home.module.scss";
import { Canvas } from "@react-three/fiber";
import { useEffect, useState } from "react";
import Experience from "@/components/Experience";
import Form from "@/components/Form";
import { useRouter } from "next/router";

function Home({ data }) {
  const router = useRouter();
  const { blog, posts } = data.response;
  const [filteredPosts, setFilteredPosts] = useState([]);
  const profile = router.query.profile;
  // console.log(data);
  // console.log(router.query.profile);

  const extractFirstTumblrUrl = (string) => {
    // Use a regular expression to find the first url in the string that
    // starts with "https://64.media.tumblr.com/"
    const regex = /https:\/\/64\.media\.tumblr\.com\/[^\s]+/;
    const matches = string.match(regex);
    if (matches && matches.length > 0) {
      // Remove any quotation mark at the end of the first match
      const url = matches[0].replace(/\"$/, "");
      // Return the url without the quotation mark
      return url;
    } else {
      // Return null if no match is found
      return null;
    }
  };

  useEffect(() => {
    let data = [];

    posts.map((post, i) => {
      // If the type is photo, we extract the first image url from the photos array.
      if (post.type === "photo") {
        data.push({
          key: i,
          id: post.id_string,
          timestamp: post.timestamp,
          image: post.photos[0].alt_sizes[1].url,
          summary: post.summary,
          url: post.short_url,
        });
        // If the type is text, we extract the first image URL in the body of the text.
      } else if (post.type === "text") {
        data.push({
          key: i,
          id: post.id_string,
          timestamp: post.timestamp,
          image: extractFirstTumblrUrl(post.body),
          summary: post.summary,
          url: post.short_url,
        });
      }
    });

    setFilteredPosts(data.reverse());
  }, [posts]);

  console.log(filteredPosts);

  return (
    <div className={styles.container}>
      <Head>
        <title>𝓁𝒾𝓋𝒾𝓃𝑔 𝒹𝒾𝑔𝒾𝓉𝒶𝓁 𝒶𝓇𝒸𝒽𝒾𝓋𝑒𝓈</title>
        <meta name="description" content="Generated by create next app" />
        <link
          rel="icon"
          href="https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/apple/325/bubbles_1fae7.png"
        />
      </Head>

      <div className={styles.overlay}>
        {/* If there is no profile in the query, render the description for oneterabytekilobyteage */}
        {profile === undefined ? (
          <p>
            One Terabyte of Kilobyte Age is a project by artists Olia Lialina
            and Dragan Espenschied that is centered around the preservation and
            restoration of websites from GeoCities, the early internet&apos;s
            agora of vernacular design. Screenshots are automatically generated
            from a stash of old Geocities home pages, rescued by the Archive
            Team in 2009. The files are processed from oldest to newest.
          </p>
        ) : (
          <div>
            {/* If there is a profile in the query, render their blog url and avatar */}
            {/* <img style={{ borderRadius: 4 }} src={blog.avatar[3].url} /> */}
            <p>{blog.url}</p>
          </div>
        )}
      </div>

      <footer className={styles.footer}>
        <div className={styles.credits}>
          <p>Design & Development @bhris001</p>
        </div>
        <Form />
      </footer>

      <div className={styles.scene}>
        <Canvas className={styles.canvas} shadows={true}>
          <Experience filteredPosts={filteredPosts} />
        </Canvas>
      </div>
    </div>
  );
}

// This gets called on every request
export async function getServerSideProps({ query }) {
  // Pull the user's profile name from the URL query and store it to "profile"
  const profile = query.profile;

  // Initialize data (can't do const data  =  ... inside of if/else)
  let data;

  // If there is a profile name in query params, use that profile as the source for all our images.
  if (profile) {
    const res = await fetch(
      `https://api.tumblr.com/v2/blog/${profile}.tumblr.com/posts/photo?api_key=${process.env.API_KEY}&limit=50`
    );
    data = await res.json();
  } else {
    // If the query params are empty, default to oneterabyteofkilobyteage.
    const res = await fetch(
      `https://api.tumblr.com/v2/blog/oneterabyteofkilobyteage.tumblr.com/posts/photo?api_key=${process.env.API_KEY}&limit=50`
    );
    data = await res.json();
  }

  // Pass data to the page via props
  return { props: { data } };
}

export default Home;
